rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/fingerprints/$(request.auth.uid)/roles) &&
        'admin' in get(/databases/$(database)/documents/fingerprints/$(request.auth.uid)/roles).data;
    }

    function fingerprintExists(fingerprintId) {
      return exists(/databases/$(database)/documents/fingerprints/$(fingerprintId));
    }

    function isAccountOwner(accountId) {
      return isAuthenticated() && request.auth.uid == accountId;
    }

    function accountOwnsFingerprint(fingerprintId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/accounts/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/accounts/$(request.auth.uid)).data.fingerprintId == fingerprintId;
    }

    function isInternalService() {
      return request.headers['x-internal-service-token'] == resource.data.internalServiceToken;
    }

    // Public Collections (Read Only)
    match /stats/{document=**} {
      allow read: if true;
      allow write: if isInternalService();
    }

    match /profiles/{profileId} {
      allow read: if true;
      // Only account owners can create/modify profiles
      allow create, update, delete: if isAccountOwner(request.auth.uid);
    }

    match /capabilities/{capabilityId} {
      allow read: if true;
      // Only account owners can modify capabilities
      allow write: if isAccountOwner(request.auth.uid);
    }

    match /price_cache/{document=**} {
      allow read: if true;
      allow write: if isInternalService();
    }

    // Protected Collections (Authenticated + Ownership)
    match /fingerprints/{fingerprintId} {
      // Anyone can create a fingerprint
      allow create: if true;
      // Read/Update requires account ownership
      allow read, update: if accountOwnsFingerprint(fingerprintId) || isAdmin();
      allow delete: if isAdmin();
    }

    match /visits/{visitId} {
      // Create just needs fingerprint to exist (fingerprintWriteEndpoint)
      allow create: if fingerprintExists(request.resource.data.fingerprintId);
      // Read and delete need account ownership (protectedEndpoint)
      allow read, delete: if accountOwnsFingerprint(resource.data.fingerprintId) || isAdmin();
    }

    match /presence/{fingerprintId} {
      allow read: if true;
      // Just needs fingerprint to exist for writes
      allow write: if fingerprintExists(fingerprintId) || isInternalService();
    }

    match /impressions/{impressionId} {
      // Create just needs fingerprint to exist (fingerprintWriteEndpoint)
      allow create: if fingerprintExists(request.resource.data.fingerprintId);
      // Read and delete need account ownership (protectedEndpoint)
      allow read, delete: if accountOwnsFingerprint(resource.data.fingerprintId) || isAdmin();
    }

    match /sites/{siteId} {
      // All operations require account ownership of the linked fingerprint
      allow read, write: if accountOwnsFingerprint(resource.data.fingerprintId) || isAdmin();
    }

    // Internal Collections (System Only)
    match /{path=**}/rate_limits/{document=**} {
      allow read, write: if isInternalService();
    }

    match /{path=**}/rate_limit_stats/{document=**} {
      allow read, write: if isInternalService();
    }

    match /{path=**}/tag_rules/{document=**} {
      allow read, write: if isInternalService();
    }

    match /{path=**}/tag_stats/{document=**} {
      allow read, write: if isInternalService();
    }

    match /{path=**}/stats_history/{document=**} {
      allow read, write: if isInternalService();
    }

    // Account-Based Collections
    match /accounts/{accountId} {
      // Must have valid fingerprint to create account
      allow create: if fingerprintExists(request.resource.data.fingerprintId);
      // Only account owner can read/update/delete their account
      allow read, update, delete: if isAccountOwner(accountId);
      // Admin can also delete
      allow delete: if isAdmin();
    }

    match /transitory_fingerprints/{fingerprintId} {
      // Anyone can create and update transitory fingerprints
      allow create, update: if true;
      // Only internal services and accounts that own the linked fingerprint can read
      allow read: if isInternalService() || 
        (request.auth != null && resource.data.linkedFingerprintId != null && 
         accountOwnsFingerprint(resource.data.linkedFingerprintId));
      // Only internal services can delete
      allow delete: if isInternalService();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
