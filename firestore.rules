rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common validation functions
    function isValidUnixTime(timeInMillis) {
      return timeInMillis is number 
        && timeInMillis <= request.time.toMillis() + 60000  // Within 1 minute future
        && timeInMillis >= request.time.toMillis() - 60000; // Within 1 minute past
    }

    function isValidFirestoreTimestamp(firestoreTimestamp) {
      return firestoreTimestamp is timestamp
        && firestoreTimestamp.toMillis() <= request.time.toMillis() + 60000
        && firestoreTimestamp.toMillis() >= request.time.toMillis() - 60000;
    }

    function isValidRole(role) {
      return role in ['user', 'agent-initiate', 'agent-field', 'agent-senior', 'agent-master', 'admin'];
    }

    function isValidTag(tag) {
      return tag is string && tag.matches('^[a-zA-Z0-9_-]+$');
    }

    // Rules for fingerprints collection
    match /fingerprints/{fingerprintId} {
      allow read: if request.path.matches('/fingerprints/[^/]+$');
      allow write: if false;  // Only Cloud Functions can write

      function isValidFingerprintData() {
        let data = request.resource.data;
        return data.createdAt is timestamp
          && (!data.keys().hasAny(['ipMetadata']) 
              || (data.ipMetadata.lastSeenAt is map 
                  && data.ipMetadata.lastSeenAt.values().hasAll([request.time])));
      }
    }

    // Rules for visits collection
    match /visits/{visitId} {
      allow read, write: if false;  // Only Cloud Functions can access

      function isValidVisitData() {
        let data = request.resource.data;
        return data.unixTime is number  // Unix timestamp
          && isValidUnixTime(data.unixTime);
      }
    }

    // Rules for presence tracking
    match /presence/{fingerprintId} {
      allow read, write: if false;  // Only Cloud Functions can access

      function isValidPresenceData() {
        let data = request.resource.data;
        return data.unixTime is number  // Unix timestamp
          && isValidUnixTime(data.unixTime);
      }
    }

    // Rules for API keys
    match /apiKeys/{keyId} {
      allow read, write: if false;  // Strictly Cloud Functions only

      function isValidApiKeyData() {
        let data = request.resource.data;
        return data.createdAt is timestamp
          && data.expiresAt is timestamp
          && (!data.keys().hasAny(['revokedAt']) || data.revokedAt is timestamp)
          && isValidFirestoreTimestamp(data.createdAt)
          && isValidFirestoreTimestamp(data.expiresAt);
      }
    }

    // Rules for impressions
    match /impressions/{impressionId} {
      allow read, write: if false;  // Only Cloud Functions can access

      function isValidImpressionData() {
        let data = request.resource.data;
        return data.fingerprintId is string
          && data.type is string
          && data.data is map
          && data.createdAt is timestamp
          && isValidFirestoreTimestamp(data.createdAt);
      }
    }

    // Rules for price cache
    match /priceCache/{docId} {
      allow read, write: if false;  // Only Cloud Functions can access

      function isValidPriceCacheData() {
        let data = request.resource.data;
        return data.unixTime is number  // Unix timestamp
          && isValidUnixTime(data.unixTime);
      }
    }

    // Rules for price history - public data
    match /price-history/{docId} {
      allow read: if true;  // Public read for price data
      allow write: if false;  // Only Cloud Functions can write
    }

    // Rules for stability metrics - public data
    match /stability-metrics/{docId} {
      allow read: if true;  // Public read for stability data
      allow write: if false;  // Only Cloud Functions can write
    }

    // Rules for rate limits - private data
    match /rate-limits/{docId} {
      allow read, write: if false;  // Strictly Cloud Functions only
    }

    // Rules for tags - private data
    match /tags/{tagId} {
      allow read, write: if false;  // Only Cloud Functions can access
      allow update: if false && isValidTag(request.resource.data.tag);  // Additional validation even though write is false
    }

    // Rules for role assignments - private data
    match /roles/{roleId} {
      allow read, write: if false;  // Only Cloud Functions can access
      allow update: if false && isValidRole(request.resource.data.role);  // Additional validation even though write is false
    }
  }
}
